generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    sites         Site[]
    comments      Comment[]
    reactions     Reaction[]
    up            Comment[]  @relation("up")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Site {
    id     String @id @default(cuid())
    name   String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    Page   Page[]

    @@index([userId])
}

model Page {
    id        String     @id @default(cuid())
    site      Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)
    siteId    String
    name      String?
    comments  Comment[]
    view      Int        @default(0)
    reactions Reaction[]

    @@index([siteId])
}

model Reaction {
    id     String       @id @default(cuid())
    userId String
    user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    pageId String
    page   Page         @relation(fields: [pageId], references: [id], onDelete: Cascade)
    type   ReactionType

    @@index([userId])
    @@index([pageId])
}

enum ReactionType {
    Rocket
    ThumbUp
    ThumbDown
    Happy
    Sad
    Party
    Love
    Eyes
}

model Comment {
    id       String    @id @default(cuid())
    date     DateTime  @default(now())
    content  String
    children Comment[] @relation("children")
    parent   Comment?  @relation("children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId String?
    userId   String?
    user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    page     Page?     @relation(fields: [pageId], references: [id])
    pageId   String
    up       User[]    @relation("up")

    @@index([userId])
    @@index([pageId])
    @@index([parentId])
}
