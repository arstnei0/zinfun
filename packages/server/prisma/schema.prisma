generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("PUBLIC_DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Site          Site[]
    Comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Site {
    id     String @id @default(cuid())
    name   String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    Page   Page[]

    @@index([userId])
}

model Page {
    id       String    @id @default(cuid())
    site     Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
    siteId   String
    name     String?
    comments Comment[]

    @@index([siteId])
}

model Comment {
    id      String  @id @default(cuid())
    content String
    userId  String?
    user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    Page    Page?   @relation(fields: [pageId], references: [id])
    pageId  String

    @@index([userId])
    @@index([pageId])
}
